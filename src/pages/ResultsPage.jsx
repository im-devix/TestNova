import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Trophy, 
  Target, 
  Clock, 
  TrendingUp,
  Share2,
  Download,
  RotateCcw,
  Eye,
  Award,
  Zap
} from 'lucide-react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { toast } from 'react-hot-toast';
import Button from '../components/UI/Button';
import Card from '../components/UI/Card';
import useQuizStore from '../store/quizStore';

const ResultsPage = () => {
  const {
    currentQuiz,
    results,
    userAnswers,
    timePerQuestion,
    setCurrentPage,
    resetQuiz
  } = useQuizStore();

  const [showDetailedResults, setShowDetailedResults] = useState(false);

  useEffect(() => {
    if (!results || !currentQuiz) {
      setCurrentPage('home');
    }
  }, [results, currentQuiz, setCurrentPage]);

  if (!results || !currentQuiz) {
    return null;
  }

  const pieData = [
    { name: 'Correct', value: results.correct, color: '#22c55e' },
    { name: 'Incorrect', value: results.incorrect, color: '#ef4444' },
    { name: 'Unattempted', value: results.unattempted, color: '#f59e0b' }
  ];

  const timeData = currentQuiz.questions.map((question, index) => ({
    question: `Q${index + 1}`,
    time: timePerQuestion[index] || 0,
    correct: userAnswers[index] === question.correctAnswer
  }));

  const getPerformanceLevel = (percentage) => {
    if (percentage >= 90) return { level: 'Excellent', color: 'text-success-600', bg: 'bg-success-100' };
    if (percentage >= 80) return { level: 'Very Good', color: 'text-success-600', bg: 'bg-success-100' };
    if (percentage >= 70) return { level: 'Good', color: 'text-warning-600', bg: 'bg-warning-100' };
    if (percentage >= 60) return { level: 'Fair', color: 'text-warning-600', bg: 'bg-warning-100' };
    return { level: 'Needs Improvement', color: 'text-error-600', bg: 'bg-error-100' };
  };

  const performance = getPerformanceLevel(results.percentage);

  const handleShare = async () => {
    const shareText = `I scored ${results.percentage}% (${results.correct}/${results.totalQuestions}) on "${currentQuiz.title}" quiz! ðŸŽ‰`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Quiz Results',
          text: shareText,
          url: window.location.href
        });
      } catch (error) {
        if (error.name !== 'AbortError') {
          fallbackShare(shareText);
        }
      }
    } else {
      fallbackShare(shareText);
    }
  };

  const fallbackShare = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success('Results copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy results');
    }
  };

  const handleDownload = () => {
    // Create a simple text report
    const report = `
Quiz Results - ${currentQuiz.title}
=====================================

Score: ${results.correct}/${results.totalQuestions} (${results.percentage}%)
Accuracy: ${results.accuracy}%
Average Time per Question: ${results.avgTime}s
Performance Level: ${performance.level}

Question Breakdown:
${currentQuiz.questions.map((question, index) => `
Q${index + 1}: ${question.question}
Your Answer: ${userAnswers[index] !== null ? question.options[userAnswers[index]] : 'Not answered'}
Correct Answer: ${question.options[question.correctAnswer]}
Result: ${userAnswers[index] === question.correctAnswer ? 'âœ“ Correct' : 'âœ— Incorrect'}
Time Spent: ${timePerQuestion[index] || 0}s
`).join('')}

Generated by QuizMaster Pro
    `;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `quiz-results-${currentQuiz.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Results downloaded!');
  };

  const handleRetakeQuiz = () => {
    resetQuiz();
    setCurrentPage('upload');
  };

  const handleViewSolutions = () => {
    setCurrentPage('solutions');
  };

  return (
    <div className="min-h-screen py-8 lg:py-16">
      <div className="container-max section-padding">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-6xl mx-auto"
        >
          {/* Header */}
          <div className="text-center mb-12">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ type: "spring", stiffness: 200, delay: 0.2 }}
              className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-primary-500 to-accent-500 rounded-full mb-6 shadow-glow"
            >
              <Trophy className="w-10 h-10 text-white" />
            </motion.div>
            
            <h1 className="text-4xl lg:text-5xl font-bold text-neutral-900 mb-4">
              Quiz Complete!
            </h1>
            <p className="text-xl text-neutral-600 mb-2">
              {currentQuiz.title}
            </p>
            <div className={`inline-flex items-center space-x-2 px-4 py-2 rounded-full ${performance.bg}`}>
              <Award className={`w-4 h-4 ${performance.color}`} />
              <span className={`font-semibold ${performance.color}`}>
                {performance.level}
              </span>
            </div>
          </div>

          {/* Score Circle */}
          <div className="flex justify-center mb-12">
            <motion.div
              initial={{ scale: 0, rotate: -180 }}
              animate={{ scale: 1, rotate: 0 }}
              transition={{ type: "spring", stiffness: 100, delay: 0.3 }}
              className="relative"
            >
              <div className="w-48 h-48 rounded-full bg-gradient-to-br from-primary-500 to-accent-500 p-2 shadow-large">
                <div className="w-full h-full bg-white rounded-full flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-4xl font-bold text-neutral-900 mb-1">
                      {results.percentage}%
                    </div>
                    <div className="text-sm text-neutral-600">
                      {results.correct}/{results.totalQuestions}
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>

          {/* Stats Grid */}
          <div className="grid md:grid-cols-4 gap-6 mb-12">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
            >
              <Card className="text-center">
                <div className="w-12 h-12 bg-gradient-to-br from-success-500 to-success-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Target className="w-6 h-6 text-white" />
                </div>
                <div className="text-2xl font-bold text-success-600 mb-1">
                  {results.correct}
                </div>
                <div className="text-sm text-neutral-600">Correct</div>
              </Card>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 }}
            >
              <Card className="text-center">
                <div className="w-12 h-12 bg-gradient-to-br from-error-500 to-error-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Zap className="w-6 h-6 text-white" />
                </div>
                <div className="text-2xl font-bold text-error-600 mb-1">
                  {results.incorrect}
                </div>
                <div className="text-sm text-neutral-600">Incorrect</div>
              </Card>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.6 }}
            >
              <Card className="text-center">
                <div className="w-12 h-12 bg-gradient-to-br from-primary-500 to-primary-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <TrendingUp className="w-6 h-6 text-white" />
                </div>
                <div className="text-2xl font-bold text-primary-600 mb-1">
                  {results.accuracy}%
                </div>
                <div className="text-sm text-neutral-600">Accuracy</div>
              </Card>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.7 }}
            >
              <Card className="text-center">
                <div className="w-12 h-12 bg-gradient-to-br from-warning-500 to-warning-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Clock className="w-6 h-6 text-white" />
                </div>
                <div className="text-2xl font-bold text-warning-600 mb-1">
                  {results.avgTime}s
                </div>
                <div className="text-sm text-neutral-600">Avg Time</div>
              </Card>
            </motion.div>
          </div>

          {/* Charts */}
          <div className="grid lg:grid-cols-2 gap-8 mb-12">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.8 }}
            >
              <Card>
                <h3 className="text-xl font-semibold text-neutral-900 mb-6">
                  Performance Breakdown
                </h3>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={pieData}
                        cx="50%"
                        cy="50%"
                        innerRadius={60}
                        outerRadius={100}
                        paddingAngle={5}
                        dataKey="value"
                      >
                        {pieData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
                <div className="flex justify-center space-x-6 mt-4">
                  {pieData.map((entry, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <div 
                        className="w-3 h-3 rounded-full" 
                        style={{ backgroundColor: entry.color }}
                      />
                      <span className="text-sm text-neutral-600">
                        {entry.name}: {entry.value}
                      </span>
                    </div>
                  ))}
                </div>
              </Card>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.9 }}
            >
              <Card>
                <h3 className="text-xl font-semibold text-neutral-900 mb-6">
                  Time per Question
                </h3>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={timeData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="question" />
                      <YAxis />
                      <Tooltip 
                        formatter={(value, name) => [`${value}s`, 'Time']}
                        labelFormatter={(label) => `Question ${label.slice(1)}`}
                      />
                      <Bar 
                        dataKey="time" 
                        fill="#4f46e5"
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </Card>
            </motion.div>
          </div>

          {/* Action Buttons */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 1 }}
            className="flex flex-wrap gap-4 justify-center"
          >
            <Button
              onClick={handleViewSolutions}
              icon={Eye}
              size="lg"
            >
              View Solutions
            </Button>
            
            <Button
              variant="secondary"
              onClick={handleShare}
              icon={Share2}
              size="lg"
            >
              Share Results
            </Button>
            
            <Button
              variant="secondary"
              onClick={handleDownload}
              icon={Download}
              size="lg"
            >
              Download Report
            </Button>
            
            <Button
              variant="accent"
              onClick={handleRetakeQuiz}
              icon={RotateCcw}
              size="lg"
            >
              Retake Quiz
            </Button>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
};

export default ResultsPage;